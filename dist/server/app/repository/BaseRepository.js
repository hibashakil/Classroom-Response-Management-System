"use strict";
var passport = require('passport');
var mongoose = require("mongoose");
var RepositoryBase = (function () {
    // private _model: IUserModel;
    function RepositoryBase(schemaModel) {
        this._model = schemaModel;
    }
    //ditched register because it didn't make sense
    RepositoryBase.prototype.register = function (item, callback) {
        this._model.create(item, callback);
    };
    RepositoryBase.prototype.create = function (item, callback) {
        this._model.create(item, callback);
    };
    RepositoryBase.prototype.retrieve = function (callback) {
        this._model.find({}, callback);
    };
    RepositoryBase.prototype.update = function (_id, item, callback) {
        this._model.update({ _id: _id }, item, callback);
    };
    RepositoryBase.prototype.delete = function (_id, callback) {
        this._model.remove({ _id: this.toObjectId(_id) }, function (err) { return callback(err, null); });
    };
    RepositoryBase.prototype.findById = function (_id, callback) {
        this._model.findById(_id, callback);
    };
    RepositoryBase.prototype.toObjectId = function (_id) {
        return mongoose.Types.ObjectId.createFromHexString(_id);
    };
    return RepositoryBase;
}());
module.exports = RepositoryBase;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9yZXBvc2l0b3J5L0Jhc2VSZXBvc2l0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFJQSxJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFJbkMsSUFBTyxRQUFRLFdBQVcsVUFBVSxDQUFDLENBQUM7QUFFdEM7SUFHSSw4QkFBOEI7SUFFOUIsd0JBQWEsV0FBOEM7UUFDdkQsSUFBSSxDQUFDLE1BQU0sR0FBRyxXQUFXLENBQUM7SUFDOUIsQ0FBQztJQUNELCtDQUErQztJQUM5QyxpQ0FBUSxHQUFSLFVBQVUsSUFBTyxFQUFFLFFBQTJDO1FBQzNELElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQsK0JBQU0sR0FBTixVQUFRLElBQU8sRUFBRSxRQUEyQztRQUN4RCxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFFdkMsQ0FBQztJQUVELGlDQUFRLEdBQVIsVUFBVSxRQUEyQztRQUNqRCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDbEMsQ0FBQztJQUVELCtCQUFNLEdBQU4sVUFBUSxHQUE0QixFQUFFLElBQU8sRUFBRSxRQUEyQztRQUN0RixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFFbkQsQ0FBQztJQUVELCtCQUFNLEdBQU4sVUFBUSxHQUFXLEVBQUUsUUFBMEM7UUFDM0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBQyxFQUFFLFVBQUMsR0FBRyxJQUFLLE9BQUEsUUFBUSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBbkIsQ0FBbUIsQ0FBQyxDQUFDO0lBRWxGLENBQUM7SUFFRCxpQ0FBUSxHQUFSLFVBQVUsR0FBUSxFQUFFLFFBQXlDO1FBQ3pELElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFFLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBQ08sbUNBQVUsR0FBbEIsVUFBb0IsR0FBVztRQUMzQixNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDM0QsQ0FBQztJQUVMLHFCQUFDO0FBQUQsQ0F2Q0EsQUF1Q0MsSUFBQTtBQUVELGlCQUFTLGNBQWMsQ0FBQyIsImZpbGUiOiJhcHAvcmVwb3NpdG9yeS9CYXNlUmVwb3NpdG9yeS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQgSVJlYWQgPSByZXF1aXJlKFwiLi9pbnRlcmZhY2VzL1JlYWRcIik7XHJcbmltcG9ydCBJV3JpdGUgPSByZXF1aXJlKFwiLi9pbnRlcmZhY2VzL1dyaXRlXCIpO1xyXG5pbXBvcnQgSVVzZXJNb2RlbCA9IHJlcXVpcmUoXCIuLy4uL21vZGVsL2ludGVyZmFjZXMvVXNlck1vZGVsXCIpO1xyXG52YXIgcGFzc3BvcnQgPSByZXF1aXJlKCdwYXNzcG9ydCcpO1xyXG5pbXBvcnQgZXhwcmVzcyA9IHJlcXVpcmUoXCJleHByZXNzXCIpO1xyXG5cclxuXHJcbmltcG9ydCBtb25nb29zZSA9IHJlcXVpcmUoXCJtb25nb29zZVwiKTtcclxuXHJcbmNsYXNzIFJlcG9zaXRvcnlCYXNlPFQgZXh0ZW5kcyBtb25nb29zZS5Eb2N1bWVudD4gaW1wbGVtZW50cyBJUmVhZDxUPiwgSVdyaXRlPFQ+IHtmXHJcblxyXG4gICAgcHJpdmF0ZSBfbW9kZWw6IG1vbmdvb3NlLk1vZGVsPG1vbmdvb3NlLkRvY3VtZW50PjtcclxuICAgIC8vIHByaXZhdGUgX21vZGVsOiBJVXNlck1vZGVsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yIChzY2hlbWFNb2RlbDogbW9uZ29vc2UuTW9kZWw8bW9uZ29vc2UuRG9jdW1lbnQ+KSB7XHJcbiAgICAgICAgdGhpcy5fbW9kZWwgPSBzY2hlbWFNb2RlbDtcclxuICAgIH1cclxuICAgIC8vZGl0Y2hlZCByZWdpc3RlciBiZWNhdXNlIGl0IGRpZG4ndCBtYWtlIHNlbnNlXHJcbiAgICAgcmVnaXN0ZXIgKGl0ZW06IFQsIGNhbGxiYWNrOiAoZXJyb3I6IGFueSwgcmVzdWx0OiBhbnkpID0+IHZvaWQpIHtcclxuICAgICAgICB0aGlzLl9tb2RlbC5jcmVhdGUoaXRlbSwgY2FsbGJhY2spO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZSAoaXRlbTogVCwgY2FsbGJhY2s6IChlcnJvcjogYW55LCByZXN1bHQ6IGFueSkgPT4gdm9pZCkge1xyXG4gICAgICAgIHRoaXMuX21vZGVsLmNyZWF0ZShpdGVtLCBjYWxsYmFjayk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHJldHJpZXZlIChjYWxsYmFjazogKGVycm9yOiBhbnksIHJlc3VsdDogYW55KSA9PiB2b2lkKSB7XHJcbiAgICAgICAgdGhpcy5fbW9kZWwuZmluZCh7fSwgY2FsbGJhY2spXHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlIChfaWQ6IG1vbmdvb3NlLlR5cGVzLk9iamVjdElkLCBpdGVtOiBULCBjYWxsYmFjazogKGVycm9yOiBhbnksIHJlc3VsdDogYW55KSA9PiB2b2lkKSB7XHJcbiAgICAgICAgdGhpcy5fbW9kZWwudXBkYXRlKHtfaWQ6IF9pZH0sIGl0ZW0sIGNhbGxiYWNrKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlIChfaWQ6IHN0cmluZywgY2FsbGJhY2s6KGVycm9yOiBhbnksIHJlc3VsdDogYW55KSA9PiB2b2lkKSB7XHJcbiAgICAgICAgdGhpcy5fbW9kZWwucmVtb3ZlKHtfaWQ6IHRoaXMudG9PYmplY3RJZChfaWQpfSwgKGVycikgPT4gY2FsbGJhY2soZXJyLCBudWxsKSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGZpbmRCeUlkIChfaWQ6IGFueSwgY2FsbGJhY2s6IChlcnJvcjogYW55LCByZXN1bHQ6IFQpID0+IHZvaWQpIHtcclxuICAgICAgICB0aGlzLl9tb2RlbC5maW5kQnlJZCggX2lkLCBjYWxsYmFjayk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIHRvT2JqZWN0SWQgKF9pZDogc3RyaW5nKSA6IG1vbmdvb3NlLlR5cGVzLk9iamVjdElkIHtcclxuICAgICAgICByZXR1cm4gbW9uZ29vc2UuVHlwZXMuT2JqZWN0SWQuY3JlYXRlRnJvbUhleFN0cmluZyhfaWQpXHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgPSBSZXBvc2l0b3J5QmFzZTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
